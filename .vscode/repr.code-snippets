{
  // Place your snippets workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Generic repr": {
    "prefix": "_def_repr_",
    "body": [
      "def __repr__(self):",
      "    # enhanced from Fluent Python 2ed. p189",
      "    cls = self.__class__",
      "    cls_name = cls.__name__",
      "    # dataclass version",
      "    field_names = (field.name for field in fields(cls))",
      "    # NamedTuple version",
      "    # field_names = (field.name for field in self._fields)",
      "    # Class version",
      "    # field_names = (key for key in self.__dict__ if not key.startswith('_'))",
      "    indent = ' ' * 4",
      "    rep = [f'{cls_name}(']",
      "    for field in field_names:",
      "        value = getattr(self, field)",
      "        rep.append(f'{indent}{field} = {value!r}')",
      "    rep.append(')')",
      "    return '\\n'.join(rep)"
    ],
    "description": "Fairly generic __repr__ function"
  }
}
